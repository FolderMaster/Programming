<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGBgAAAEAIACICQAAFgAAACgAAAAYAAAAMAAAAAEAIAAAAAAAAAkAACMuAAAjLgAAAAAAAAAA
        AACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgAB/f38Af4CAAHx6
        eBZeSzb3WkMt+nBmXTmDhokAfn59A4CAgAB/f38AgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgAB+fn4BgIGBAHt5dxldSDP/Xkk0/FtFL+txaWA6goSGAH5+
        fQOAgIAAf3+AAICAgAB/f38AgICAAH9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/
        fwJ+fn4Cfn9/A3x8ewhgTju0XEYw/11JNf9bRC7scmlhOoKDhQB+fn0DgICAAH9/fwCAgIAAf39/AIKC
        ggCDg4MAg4ODAIODgwCDg4MAg4ODAIODgwCDg4MAg4ODAIODgwCDg4MAgoKCAISFhgB+fHkLXkw4tFxG
        Mf9eSTX9W0Qu63FpYTqChIUAf35+AoCAgAB9fX0DhISEAC0tLaQXFxfRFxcXzhcXF9EXFxfRFxcX0RcX
        F9EXFxfRFxcX0RcXF9AWFhbPFxcX0RwbG3dwcXEAg4B+Cl5LOLVbRjD/XUk1/ltFL+lxaF9EgYKEAn5+
        fQN8fHwEhYWFABYWFtAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8MCwp9b3BxAX58egtfTDi1XEYw/1xHMf9eSjabdW9oAIKFhwB9fX0DhISEABwcHMQAAAD9W1tbRnJy
        ciJtbW0jbm5uIm5ubiJubm4ibm5uIm5ubiJubm4ibm5uIm9vbyRra2soc3JyAoOEhQB7eXcIX0w4vmBN
        OalsYVQTXUgzrHBmXEp9fX0EhYWFABwcHMUAAAD/bW1tIomJiQCDg4MAhISEAISEhACEhIQAhISEAISE
        hACEhIQAhISEAISEhACFhYUAgoKCAH5+fQGBgoMAend0CWhaTBpdSTTMW0Yw/1pELbt9fX0EhYWFABsb
        G8YAAAD/aWlpK4ODgwF+fn4Cf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AICA
        gAB+fn0BhIWGAH56dxNdSjbFX0w4tnt3dQR9fX0EhYWFABwcHMYAAAD/ampqKoWFhQB/f38BgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAH9/fwCDg4MAcHBvBG1ubwCKiYgAe3p4A4KD
        hAB9fX0EhYWFABwcHMYAAAD/ampqKoWFhQB/f38BgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAH5+fgCGhoYAY2NjLQ0NDI1VVVYYgYGCAH59fQF9fX0EhYWFABwcHMYAAAD/ampqKoWF
        hQB/f38BgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAH9/fwGEhIQAa2trKwAA
        AP8TEhK/hYWFAHx8fAR9fX0EhYWFABwcHMYAAAD/ampqKoWFhQB/f38BgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAH9/fwCFhYUAaWlpKQAAAPweHh7IhISEAH19fQV9fX0EhYWFABwc
        HMYAAAD/ampqKoWFhQB/f38BgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAH9/
        fwGFhYUAampqKgAAAP4cHBzFhYWFAH19fQR9fX0EhYWFABwcHMYAAAD/ampqKoWFhQB/f38BgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAH9/fwGFhYUAampqKgAAAP8cHBzGhYWFAH19
        fQV9fX0EhYWFABsbG8YAAAD/aWlpK4ODgwF+fn4Cf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/
        fwF/f38Bf39/AX5+fgKDg4MBaWlpKwAAAP8bGxvGhYWFAH19fQV9fX0EhYWFABwcHMUAAAD/bW1tIomJ
        iQCDg4MAhISEAISEhACEhIQAhISEAISEhACEhIQAhISEAISEhACEhIQAhISEAIODgwCJiYkAbW1tIgAA
        AP8cHBzFhYWFAH19fQV9fX0DhISEABwcHMQAAAD9W1tbRnJyciJtbW0jbm5uIm5ubiJubm4ibm5uIm5u
        biJubm4ibm5uIm5ubiJubm4ibm5uIm1tbSNycnIiW1tbRgAAAP0cHBzEhISEAH19fQR8fHwEhYWFABYW
        FtAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8WFhbQhYWFAHx8fAV9fX0DhISEAC0tLaQXFxfRFxcXzhcXF9EXFxfRFxcX0RcX
        F9EXFxfRFxcX0RcXF9EXFxfRFxcX0RcXF9EXFxfRFxcX0RcXF9EXFxfRFxcXzhcXF9EtLS2khISEAH19
        fQSAgIAAf39/AIKCggCDg4MAg4ODAIODgwCDg4MAg4ODAIODgwCDg4MAg4ODAIODgwCDg4MAg4ODAIOD
        gwCDg4MAg4ODAIODgwCDg4MAg4ODAIODgwCCgoIAf39/AICAgAB/f38AgICAAH9/fwF/f38Bf39/AX9/
        fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/fwF/f38Bf39/AX9/
        fwF/f38BgICAAH9/fwCAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICAgACAgIAAgICAAICA
        gACAgIAAgICAAICAgACAgIAAgICAAICAgAD//C8A//QXAMAACwD//gUAQAEAAEAAAwBAAEAAR/+gAEAA
        0ABF/+0ARf/iAEX/ogBF/+IARf+iAEX/ogBAAAIAR//iAEAAAgBAAAIAQAACAP///wDAAAMA////AP//
        /wA=
</value>
  </data>
</root>