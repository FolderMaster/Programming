<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9PT0AAAAAAFBQUAD///8AXmBeHra4
        tnPRz9C6z83PubW4tXNbX1wc////AE1NTQAAAAAAPD08AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7OzsAWlpaADc3NwDv7+8ALC4sDqis
        qVPW0tW4yqvE9adrmv+kZ5j/xaS/9NPM0banq6hRJiknDd3d3QA1NTUAUVFRAD09PQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9PT0APz8/ACMjIwCZmpkAAAAABpSX
        lDzQz9Ch0rzO7qZqmv9/KG3/eRxl/3kcZf9+Jmv/oGCT/8yyx+3MysudkZaSOQAAAAWTk5MAISEhAD4+
        PgA7OzsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7OzsAPT09AA8PDwBra2sAAAAAAXl8
        eSjGyMaF2MnV4LOBqf+GMnT/eR1m/3sgaP97IGj/eyBo/3sgaP95HWb/gy5x/613ov/SwM7ew8TDgnd7
        dyYAAAABZ2dnAAoKCgA9PT0AQkJCAAAAAAAAAAAAAAAAAAAAAAAAAAAAPj4+AAAAAABKSkoA////AFVX
        VRe3urhp2dHYzcGZuf2OQn//eh5n/3ofZ/97IGj/eyBo/3sgaP97IGj/eyBo/3sgaP96H2f/eR1m/4s8
        e/+7j7H81MnSy7W4tmdSVVIW////AEhISAAAAAAAOz09AAAAAAAAAAAAPT09AENDQwAnJycA2tvbAB0f
        HQylqKZP1tLVtsyvx/abV43/fCJp/3oeZ/97IGj/eyBo/3sgaP97IGj/eyBo/3sgaP97IGj/eyBo/3sg
        aP97IGj/eh5n/3sgaP+WT4j/xqW/9dLN0bOkqKVNGBsZC87OzgAeHx8AQEBAAAAAAAA9PT0AKSkpAAAA
        AAONkI03z87PnNTA0euobp3/gClu/3kdZv97IGf/eyBo/3sgaP96Hmf/eR1m/3sgaP9+JWv/fSVr/3sh
        aP95HWb/eh5m/3sgaP97IGj/eyBo/3kdZv9/J2z/o2aX/8+4y+rMy8yZiY2KMwAAAAIgICAAPT09AC0t
        LQAAAAAAnqCeTNfN1da3iK7/iDZ3/3kdZv97H2j/eyBo/3sgaP96H2f/eiBn/4w/fP+ueaP/y6nE/9m/
        1P/Yv9P/zq3H/7SCqv+SSIP/eyJp/3ofZ/97IGj/eyBo/3sfaP95HWb/hTJ0/7SDqv/UydLSmpyaRv//
        /wAtLi4AX19fAFRXVBfU0NW7rHWl/3ofZ/96Hmb/eyBo/3sgaP97IGj/eh5n/4Qwcv+6jbH/7eLr////
        //////////////////////////////Lq8f/Dnbz/iTl4/3oeZv97IGj/eyBo/3sgaP96Hmf/eR5n/6dt
        nv/Qys+1TVFNFFlZWQCYmJgAiY2JMtfH2OOcWJ7/izyH/4Apcf97IWj/eyBo/3oeZ/+JOXn/1brP////
        ///////////////////////////////////////////////////gzNz/kkqD/3keZ/97IGj/eyBo/30l
        bf+CLnf/jkKH/8+8zuGHjIcvj4+PAK+vrwCTl5M61cLW6ZtYn/+WT5r/k0qU/4g4gf99JGz/gy9x/9S4
        zv/////////////////////////////////////////////////////////////////i0N//jT98/3wh
        av+BLHX/hjV+/4c3gf+MQIb/zbfM55GWkTelpaUAtLS0AJSZlDzVwdbqm1ee/5ZPmv+WT5r/lk+a/5BF
        j/+9k7n//v7+//////////////////z6/P/gzNz/yKTB/8ahv//cxNf/+fb5//////////////////r3
        +v+vfKn/gzF7/4c3gf+HN4H/hzeB/4xAh//Qu8/plJmVOrCwsAC2trYAlJmUPNTB1eqaV57/lk+a/5ZP
        mv+VTpn/o2an//Dn8f/////////////////17vP/sX2n/4Iucf96IGf/eh9n/4Apbv+mapr/7eLr//7+
        /v/gzd//qnOm/4o8hP+FNH//hjaA/4U0f/+GNoD/jECG/9C6zuqWm5Y7tLS0ALa2tgCUmZQ91MHW6ppX
        nv+WT5r/lk+a/5RMmP+9kb///v7+/////////////f3+/7WFrf95H2b/eh9n/3sgaP97IGj/ex9n/3kd
        Zv+fX5T/toay/45Eif+FNH//mVWU/6Vqof+TTI7/qnGl/41CiP+MP4b/0LrO6pablzy2trYAtra2AJSZ
        lD3UwNbqm1ae/5ZPmv+WT5r/lU6Z/9K21P/////////////////r3uz/mleb/4Y0fv99JGz/eyBn/3sg
        aP98Imr/gCtz/4Uzff+GNH//hjWA/41Bh//bxNn/9fD1/+XV5P/59vn/uYy2/4s9hf/Puc7ql5yXPbi4
        uAC2trYAlJmUPdTA1uqbV57/lk+a/5ZPmv+XUZv/3cfe/////////////////9rB2/+WUJv/lk+a/5BF
        j/+EMHn/fylx/4Qye/+HN4H/hzeB/4c3gf+HN4H/iTqD/8ikxf/o2ef/wpvA//Do8P+mbKL/iz2F/8+5
        zeuXnJc9uLi4ALa2tgCUmZQ91MDW6ptWnv+WT5r/lk+a/5dRm//dxt7/////////////////2cHb/5ZQ
        mv+WT5r/llCb/5VOmP+RRpH/ij2G/4c3gf+HN4H/hzeB/4Y2gf+LPoX/0bPP/+/k7v/TttH/9e/1/697
        rP+LPYX/z7nN65eclz24uLgAtra2AJSZlD3UwNbqm1ae/5ZPmv+WT5r/lU6Z/9K11P//////////////
        ///r3+z/nl6i/5VOmf+WT5r/lk+a/5ZPmv+VTZj/j0SO/4g5g/+GNX//hjWA/4s/hv/Qs8//697q/9a7
        1P/w5u//sX2t/4s9hf/Puc3rl5yXPbi4uAC2trYAlJmUPdTA1uqbVp7/lk+a/5ZPmv+UTJj/vJG///7+
        /v////////////79/v/Ensb/lU6Z/5VOmv+WT5r/lk+a/5ZOmv+VTZn/sX2y/7mLtf+QRYr/hDN//49F
        iv+XUpL/iz+G/5lXlP+JO4P/jD+G/8+5zeqWm5c8t7e3ALa2tgCUmZQ91MDV6ptWnv+WT5r/lk+a/5VO
        mf+jZab/8Obw//////////////////jz+P/Encb/nVyh/5ZPmv+VTpn/mlee/7qMvP/y6vP//v///+HP
        4P+sdaj/ij2E/4Y1gP+HNoH/hjWA/4c2gf+MP4b/z7nN6pabljy1tbUAtbW1AJSZlDzUwdbqm1ee/5ZP
        mv+WT5r/lk+a/5VOmv/Hocn///////////////////////38/f/p2+r/1rvX/9S31f/l0+b/+/j7////
        //////////////r4+v+4irf/iDqE/4c3gf+HN4H/hzeB/4w/hv/OuM3plZuWO7KysgCwsLAAk5eTOtXC
        1umbV5//lk+a/5ZPmv+WT5r/lU6a/5xaof/dx97/////////////////////////////////////////
        ////////////////////////6drq/6VoqP+US5b/jkON/4g6hP+GN4D/jD+G/822y+eSl5I4qKioAJeX
        lwCIjIgy1sbX451bof+WTpr/lk+a/5ZPmv+WT5r/lU2Z/6Fjpf/dyN//////////////////////////
        /////////////////////////////+fY6P+pcK3/lU2Z/5ZPmv+WT5r/k0uV/4w/iv+PRYr/0L3O4YaL
        hzCQkJAAXl5eAFNWUxjSzdO6t4e7/5VMmf+VTpr/lk+a/5ZPmv+WT5r/lU2Z/51bof/HpMr/8ejy////
        //////////////////////////////Xu9f/QstL/omOl/5VNmf+WT5r/lk+a/5ZPmv+WTpr/lEyY/7aF
        tv/Pys+1S05LFVhYWAAvLy8AAAAAAZiZmErXztjTwZnE/55dov+UTZn/lk+a/5ZPmv+WT5r/lU6Z/5VO
        mv+kaKj/v5XB/9W51v/fyuH/4Mzh/9e92f/EnMb/p26r/5ZQmv+VTpn/lk+a/5ZPmv+WT5r/lU2Z/59e
        o//DnMb/187Y0JSWlEYAAAAALi8vAD09PQAnJycAAAAAA4WHhDbJycqa1sPX6raHuv+ZVJ3/lU2Z/5ZP
        mv+WT5r/lk+a/5VNmf+UTJj/lk+a/5hSnP+YU5z/lk+a/5RMmP+VTZn/lk+a/5ZPmv+WT5r/lU2Z/5lV
        nv+4ibv/1sXY6MjIyJeAg4AzAAAAAiEhIQA8PT0APT09AEFBQQAnJycA29zbAB0eHA2eoZ5P0s7StNG3
        0vWtdbD/llCa/5VOmf+WT5r/lk+a/5ZPmv+WT5r/lk+a/5ZPmv+WT5r/lk+a/5ZPmv+WT5r/lU6Z/5dQ
        m/+ud7H/0bnT9NHO0bGanZpLEhQSDMvLywAjIyMAPz8/AD09PQAAAAAAAAAAAD09PQAAAAAAR0ZGAP//
        /wBOUE4YsLOwadfP18vJp8v8pGeo/5VNmf+WTpr/lk+a/5ZPmv+WT5r/lk+a/5ZPmv+WT5r/lU6a/5VN
        mf+laKn/yqnM+9bP18iusa5lSEpIF////wBDQ0IAAAAAADw8PAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09
        PQA9PT0AGxsbAGRkZAAAAAACcHNwKMDBwITYy9nev5bC/51bof+VTZn/lk+a/5ZPmv+WT5r/lk+a/5VN
        mf+eXaL/wZjD/9jL2Ny+v76AbG9sJgAAAAFfX18AGBgWADw9OwA9PT0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA9PT0APj4+ACcnJwCSkpIAAAAABoqOijvLysuf1cHW7LaEuP+ZVJ3/lEyY/5RM
        mP+ZVZ3/t4e6/9bD1+rKycqbiIuIOQAAAAaKiooAJiYmAD4+PgA9PT0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPT09AFRUVAA1NTUA8fLxACgqKA+hpKFS087TttC2
        0vO3iLr/uIi7/9G30/LSztKznqGeTx4gHg3e394ANDQ0AExMTAA+Pj4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09PQACAgIAS0tLAP//
        /wBUVlQerrCuccrJy7TKycqzrK+sb1BSTxz///8AR0dHAAAAAAA9PT0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/4AAAf4AAAB8AAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAwAAAA+AAAAf4AAAf/gAAf/+AAf8=
</value>
  </data>
</root>